{:paths ["."]
 :pods {org.babashka/aws {:version "0.1.2"}}
 :tasks
 {:requires ([babashka.fs :as fs]
             [task-helper :as th])

  help {:doc "Displays command line options"
        :task (do
                (th/help))}

  clean {:doc "Removes work and target folders."
         :task (let [{:keys [target-dir work-dir]} (th/parse-args)]
                 (doseq [dir [target-dir work-dir]]
                   (println "Removing directory:" dir)
                   (fs/delete-tree dir)))}

  build {:doc "Builds custom runtime layer."
         :requires ([babashka.curl :as curl]
                    [clojure.java.io :as io]
                    [clojure.java.shell :refer [sh]])
         :task (let [{:keys [bb-arch bb-version target-dir work-dir]} (th/parse-args)
                     layer-zipfile (th/layer-zipfile target-dir)
                     bb-filename (th/bb-filename bb-version bb-arch)
                     bb-url (th/bb-url bb-version bb-filename)
                     bb-tarball (format "%s/%s" work-dir bb-filename)]
                 (doseq [dir [target-dir work-dir]]
                   (fs/create-dirs dir))

                 (when-not (fs/exists? bb-tarball)
                   (println "Downloading" bb-url)
                   (io/copy
                    (:body (curl/get bb-url {:as :bytes}))
                    (io/file bb-tarball)))

                 (println "Decompressing" bb-tarball "to" work-dir)
                 (shell (format "tar -C %s -xzf %s" work-dir bb-tarball))

                 (doseq [f ["bootstrap" "bootstrap.clj"]]
                   (println "Adding file" f)
                   (fs/delete-if-exists (format "%s/%s" work-dir f))
                   (fs/copy f work-dir))

                 (println "Compressing custom runtime layer:" layer-zipfile)
                 (let [{:keys [exit err]}
                       (sh "zip" layer-zipfile
                           "bb" "bootstrap" "bootstrap.clj"
                           :dir work-dir)]
                   (when (not= 0 exit)
                     (println "Error:" err))))}

  build-deps {:docs "Builds a layer for dependencies"
              :requires ([clojure.java.shell :refer [sh]]
                         [clojure.edn :as edn]
                         [clojure.string :as str]
                         [babashka.deps :refer [clojure]])
              :task (let [{:keys [deps-path target-dir work-dir]} (th/parse-args)
                          deps-zipfile (th/deps-zipfile target-dir)]
                      (when-not deps-path
                        (th/error "Mising required argument: --deps-path"))

                      (fs/create-dirs target-dir work-dir)

                      (let [gitlibs-dir "gitlibs"
                            m2-dir "m2-repo"
                            deps (->> deps-path slurp edn/read-string :deps)]

                        (spit (fs/file work-dir "deps.edn")
                              {:deps deps
                               :mvn/local-repo (str m2-dir)})

                        (let [classpath-file (fs/file work-dir "deps-classpath")
                              local-classpath-file (fs/file work-dir "deps-local-classpath")
                              deps-base-dir (str (fs/path (fs/cwd) work-dir))
                              classpath
                              (with-out-str
                                (clojure ["-Spath"]
                                         {:dir work-dir
                                          :env (assoc (into {} (System/getenv))
                                                      "GITLIBS" (str gitlibs-dir))}))
                              deps-classpath (str/replace classpath deps-base-dir "/opt")]
                          (println "Classpath before transforming:" classpath)
                          (println "Classpath after transforming:" deps-classpath)
                          (spit classpath-file deps-classpath)
                          (spit local-classpath-file classpath)

                          (println "Compressing custom runtime layer:" deps-zipfile)
                          (let [{:keys [exit err]}
                                (sh "zip" "-r" deps-zipfile
                                    (fs/file-name gitlibs-dir)
                                    (fs/file-name m2-dir)
                                    (fs/file-name classpath-file)
                                    :dir work-dir)]
                            (when (not= 0 exit)
                              (println "Error:" err))))))}

  deploy {:doc "Deploys custom runtime layer using babashka-aws."
          :depends [build]
          :requires ([pod.babashka.aws :as aws])
          :task (let [{:keys [bb-arch layer-name aws-region target-dir]} (th/parse-args)
                      layer-zipfile (th/layer-zipfile target-dir)
                      lambda-arch (if (= "amd64" bb-arch) "x86_64" "arm64")
                      runtimes (concat ["provided.al2"]
                                       (when (= "amd64" bb-arch)
                                         ["provided"]))
                      client (aws/client {:api :lambda
                                          :region aws-region})
                      zipfile (fs/read-all-bytes layer-zipfile)
                      _ (println "Publishing layer version for layer" layer-name)
                      res (aws/invoke client {:op :PublishLayerVersion
                                              :request {:LayerName layer-name
                                                        :Content {:ZipFile zipfile}
                                                        :CompatibleRuntimes runtimes
                                                        :CompatibleArchitectures [lambda-arch]}})]
                  (if (:cognitect.anomalies/category res)
                    (prn "Error:" res)
                    (println "Published layer" (:LayerVersionArn res))))}}}
